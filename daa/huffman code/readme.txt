Huffman Code program includes my LINK.H header file with one modification in the same from previous versions.
LINK.H: An ADDSORT function is added to it. This function is a way to create a tree like structure of link list. New coupled nodes will be added in the previously APPENDED linklist of nodes formed with FREQUENCY as its sorting key. (min priority generation)
Also, a CHARACTER string S is added to the STRUCTURE NODE which will store the HUFFMAN CODE.

Input file: INPUT.TXT
Output file: OUTPUT.TXT

STRUCTURE HUFFMAN: ITEM = character name; FREQ = frequency of character; HUFFCODE = huffman code generated by the program.

LINKLIST p which we get after creating tree like structure is then reversed.

eg.,

indexes of nodes according to their frequency in min-priority queue is:
5	9	12	13	16	45	

traverse of the linklist:
5	9	12	13	14	16	25	30	45	55	100	

reverse of the linklist:
100	55	45	30	25	16	14	13	12	9	5

Now, traverse linklist p with 2 more pointers let p1 & p2 with p2 = p->link; and p1=p2->link;
If, sum of info's of p1 & p2 = info of p:
	then set HUFFMAN CODE for
		p1 = HUFFMAN CODE OF p concatenated with 1
		p2 = HUFFMAN CODE OF p concatenated with 0
Otherwise, do point p = p->link;
